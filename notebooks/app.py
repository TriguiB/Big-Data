import streamlit as st
import mlflow
import mlflow.sklearn
import joblib
import pandas as pd
from scipy import sparse

# Configuration de MLflow Tracking URI
mlflow.set_tracking_uri("../mlruns")
model_name = "MyLogisticModel"

# Colonnes attendues pour le one-hot encoding de la langue
LANGUAGE_COLUMNS = ["Python", "Java", "JavaScript", "C++", "Ruby", "Go", "PHP", "Other"]

# Correspondance entre les classes et la dur√©e en jours
DURATION_CLASSES = {
    1: "0 jour (Tr√®s rapide)",
    2: "1-2 jours (Rapide)",
    3: "3-5 jours (Moyenne)",
    4: "6-8 jours (Lente)",
    5: "9+ jours (Tr√®s lente)"
}

def load_model_and_vectorizer():
    """Charge le mod√®le et le vectorizer depuis MLflow."""
    model = mlflow.sklearn.load_model(f"models:/{model_name}/Production")

    # Charger le vectorizer depuis le fichier sauvegard√©
    vectorizer_path = "../models/tfidf_vectorizer.pkl"
    vectorizer = joblib.load(vectorizer_path)

    return model, vectorizer

def predict(model, vectorizer, text_input, language_input):
    """Effectue la pr√©diction de la classe de dur√©e."""
    # Transformer le texte avec le vectorizer
    test_tfidf = vectorizer.transform([text_input])

    # Convertir la langue en une repr√©sentation one-hot
    test_language_feature = pd.get_dummies([language_input]).reindex(columns=LANGUAGE_COLUMNS, fill_value=0)
    test_language_feature = test_language_feature.values.astype(float)
    test_language_feature_sparse = sparse.csr_matrix(test_language_feature)

    # Combiner les features de texte et de langue
    test_input = sparse.hstack([test_tfidf, test_language_feature_sparse])

    # Obtenir la pr√©diction
    prediction = model.predict(test_input)[0]

    # Retourner la classe et la dur√©e correspondante
    return prediction, DURATION_CLASSES.get(prediction, "Inconnu")

# --- Interface Streamlit ---
st.title("‚è≥ Pr√©diction de la classe de dur√©e pour r√©soudre un issue GitHub")
st.write("Entrez le titre, le corps du probl√®me et le langage de programmation pour pr√©dire la classe de dur√©e.")

# Champs d'entr√©e utilisateur
title = st.text_input("üìå Titre du probl√®me")
body = st.text_area("üìù Corps du probl√®me")
language = st.selectbox("üíª Langage de programmation", LANGUAGE_COLUMNS)

# Charger le mod√®le et le vectorizer
model, vectorizer = load_model_and_vectorizer()

if st.button("üîÆ Pr√©dire"):
    if title and body:
        text_input = title + " " + body
        prediction, duration_info = predict(model, vectorizer, text_input, language)

        # Affichage du r√©sultat
        st.success(f"üìä **Classe de dur√©e pr√©dite : {prediction}**")
        st.markdown(f"‚è±Ô∏è **Dur√©e estim√©e : {duration_info}**")
    else:
        st.warning("‚ö†Ô∏è Veuillez entrer un titre et un corps pour la pr√©diction.")